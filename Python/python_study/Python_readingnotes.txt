Python reading notes

1.输入输出
  输入：input()方法
  输出:print()方法

2.if elif else
     需要缩进，一般一个TAB(4个空格)
     条件表达式结束时，需要以冒号:结束
    if age >= 18:
    	print('adult')
	else:
    	print('teenager')
     
3.数据类型(可以直接处理的)
  整数，浮点数，字符串。Python对整数/浮点数大小无限制，超过范围则用INF
  字符串需要用单引号''或者双引号""来标识，当字符串中有单引号时，用双引号括起来就可以了。而如果有双引号的话，必须转意，即\"
 r""/r''标识的字符串不转意。
 
 4.布尔运算符
 	not,or,and
 	
 5.空值
	None
	
6. 运算
//:地板除。即运算结果始终是整数。如10//3 = 3,而10//11=0
/:除法。计算结果是浮点数 9/3 =3.0
%:余数运算，结果是整数。10%3 = 1。 1%3 = 1

7.编码问题
ASCII，表示的范围0~255.如A是65，z是122.
GB2312.中文编码。Shift_JS：日文。Euc_kr：韩文。
Unicode：把所有的语言都统一到一套编码里面，这样就不会有乱码了。正常2个字节足够，比较生僻的字符4个字节。
如果要把ASCII编码英文字符转换成Unicode，则主要在前面加0即可。如A的unicode码是 00000000 0100 0001。ASCII是0100 0001.
UTF-8:把unicode编码转换成"可变长编码"的UTF-8。长度为1-6个字节。常用英文字母1个字节，汉字一般3个字节。生僻字4-6字节。
计算机内存中，统一使用Unicode编码，需要保存到应聘或者传输的时候，就转换成UTF-8。
如用记事本打开文件的时候，从文件中读取的UTF-8转换成unicode存储在内存中。保存的时候再转换成UTF-8。
网络传输时，服务器端从unicode转换成UTF-8通过网络传输到浏览器。<meta charset="UTF-8" />

ord()：将字符转换成对应的编码
char()：将编码转换成对应的字符

Python在内存中，对String是以Unicode编码的。如果要传输/保存到磁盘，就需要把String变成以字节为单位的bytes，使用encode方法。
从网络后者磁盘读取了字节流，那么读取到的数据就是bytes，要把bytes转变为String，则需要用decode()方法。
#encoding:utf-8.告诉Python编译器以utf-8读取源代码，否则可能有乱码。但是并不意味着.py文件就是以UTF-8编码的，得看编辑器的设置。
在用notepad++打开时，需要设置Encode in UTF-8 without BOM。
如果编辑器使用utf-8，且声明了#encoding:utf-8，则编辑器就不会显示乱码了。

8.格式化
%d:整数
%s:字符串
%f：浮点数
%x：十六进制
当有多个%？，需要有括号，否则省略也行。
注意，%变量 前不要有逗号，此处跟C语言不同
str = "wang"
print("hello %s" % str)
print("hello %s %s" % (str,str))
可以指定小数点后位数
print('%.2f' %3.1415)
->3.14
当需要在输出中保留%，如7%，则需要一个%来进行转意，即%%
print("%d%%" %7)
->7%

9. while & for
	while a>b:
		print("xxxx")
	
	for x in xs:
		print(x)
需要注意的是，都必须以冒号结尾

10.List
元素可变。查找和插入的时间随着元素的增加而增加；
定义方法，使用方括号，可包含各种类型的元素，如L = [1,2,3,4,'a',['c','d']]
增。L.append('e')，在末尾增加。L.insert(1,'f'),在位置1的地方插入f。如果使用insert方法插入的位置超过List长度，则在末尾插入。
删。L.pop(1)。将位置为1的元素删除，如果查询的元素超过List长度，则返回越界错误。IndexError: pop index out of range
查。L[1]，将位置1的元素返回。L[-1],将末尾的元素返回。如果查询的元素超过List长度，则返回越界错误。IndexError: pop index out of range
改。L(1,'aaa')，将位置1的元素改成aaa，L = ['aaa',2,3,4,'a',['c','d']]，如果修改的元素超过List长度，则返回越界错误。IndexError: pop index out of range
长度.L.len(),返回List的长度。


11.Tuple
元素不可变，所谓不可变的意思是，指向的元素不可变，但是如下定义指向的是list，而list是可变的，所以可变['e','f']可变成如['g','h']
定义方法。使用圆括号。可包含各种类型的元素。T = ('a','b','c',['e','f'])，
增。不可。
删。不可。
查。跟List一样。
长度。跟List一样。


12.range
返回指定范围的整数。如range(5)，返回0,1,2,3，4,5。


13.dict
字典。使用key-value对。key必须是不可变的，因为是根据key来算出hash，根据该hash得到value的存储位置，为了保证hash的正确性，所以只能使用不可变元素。
如果key使用了List，则无法加入dict。>>> key = [1, 2, 3] >>> d[key] = 'a list'   Traceback (most recent call last): 	TypeError: unhashable type: 'list'
查找和插入的速度极快，不会随着key的增加而增加，需要占用大量的内存，内存浪费多。
定义方法，使用大括号。并用冒号隔开key-value。如dic = {'a':123,'b':234}
增。不可。
删。dic.pop('a')。删除a(key)-123(value)。如果查询的元素不存在，则返回越界错误，KeyError。
查。dic['a'],如果查询的元素不存在，则返回越界错误，KeyError。这种情况下可以使用dic.get('aaa',-1)来查询，当'aaa'不存在时，默认返回-1。也可以用'aaa' in dic先判断，然后在查询。
长度。跟List一样。

14.set
集合。跟List的区别是set的元素不可重复。无序。只能存入不可变对象。
定义。s=set([1,2,3]),使用圆括号，必须使用list或者string作为输入,使用set关键字。如果有重复元素，那么重复的元素会被过滤掉。如s=set([1,1,2,2,3,3,3]),输出的只有1,2,3。
增。s.add(4)。将整数4添加到set中。如果有重复的元素被添加，则无视。
删。s.remove(2)。删除元素2。如果不存在，则KeyError: 4
查。???
交集。获取到2个set中重复的元素。使用&操作符号。s1 = set([1,2,3,4])  s2 = set([1,2,3])  s1&s2 ->1,2,3。也可使用方法：s1.intersection(s2)  
并集。合并2个set，将重复的元素剔除，获得2个set的所有的不同的元素。使用|操作符号。s1 = set([1,2,3,4])  s2 = set([1,2,3,5])  s1|s2 ->1,2,3,4,5。也可使用方法：s1.union(s2)  
差集。将2个set中的重复元素删除，获得前一个set剩余的元素。s1 = set([1,2,3,4])  s2 = set([1,2,3,5])  s1-s2 ->4。也可使用方法：s1.difference(s2) 
对称差集。获得2个set中各自不存在对方set中的元素。s1 = set([1,2,3,4])  s2 = set([1,2,3,5])    s1^s2 -> 4,5。也可使用方法：s1.symmetric_difference(s2)
长度。s.len()


14.数据类型转换函数
print(int("123"))
print(int(12.34))
print(float('12.34'))
print(str(123))
print(bool('')) ->空，当成False。
print(bool(1))->非空，当成True。

15.函数
定义方法。关键字def，函数名，参数，以冒号结尾，如。如def fun(a,b): 。遇到return，则返回。没有return，则默认返回None。
pass。使用pass作为占位符。当未确定方法的内容时，可以使用该占位符，否则方法运行时会出错。
return多个值。如myfun()方法有return x,y。调用返回多个值的方法时可以x,y = myfun()。其实返回多个值的时候实际上返回的是一个tuple，只是为了书写方便不会明确写成tuple的样子。
参数。可以定义默认参数，可变参数，关键字参数。
    ■默认参数。其中n=2，即为默认参数，当调用default_para_fun(5)，即不传入n的值的时候，使用默认参数的值。使用默认参数，可以降低调用难度。某种程度上相当于方法重载的概念。
		def default_para_fun(x,n=2):
			result = 1;
			while n>0:
				n = n-1
				result = result*n
			return result
	注意：1.默认参数放在参数列表的最后面。2.把变化大的参数放在前面，变小的参数放在后面作为默认参数。	
	3.当有多个默认参数的时候，调用方法时可以不按照出现的顺序，但是必须指定参数名（且必须和方法定义的参数名一致）
	def user_profile(name,sex,city='nj',age=6):
		print(name,sex,city,age)
    user_profile('wang', 'M', age=33)
	4.注意默认参数是否可变变量。如List这样的可变对象，则List的值会被保存下来。
	如下方法，当初次使用默认参数时，L的值是['end']，当再次调用的时候，就变成['end', 'end']，因为L变量已经在内存中保存下来了，再次修改时直接使用已经保存了(end)的L。
		def add_end(L=[]):
			L.append('end')
			return L   
	print(add_end([1,2,3])) ->[1, 2, 3, 'end']
	print(add_end([4,5,6])) ->[4, 5, 6, 'end']
	print(add_end())        ->['end']
	print(add_end())        ->['end', 'end']
	所以，尽量使用非可变对象。及时一定要用可变对象，那么最好像如下定义。
		def add_end1(L=None):
			if L is None:
				L = []
			L.append('end')
			return L
		print(add_end1())   ->['end']
		print(add_end1())   ->['end']
	■可变参数。可以传入0个至N个参数。使用可变参数，可以简化原来必须要用List或者Tuple的来调用的方法的定义。只要在参数前加上"*"符号。实际上就是传了一个Tuple。
	 def summ(*number):
		s = 0
		for n in number:
			s = n+s
		return s
	print(summ(1,2,3,3)) ->9

	ll = [1,2,3,4]
	print(summ(*ll)) ->10 当已经有一个现成的List或者Tuple时，可以在List或者Tuple前加"*"，传入具有可变参数的方法时，该传入参数就变成可变参数了。
	 
	■关键字(key-value)参数。可以传入若干含有参数名和参数值的pair，在该方法内部被转换成dict。
	定义形式**KW。需要2个星号"*"。
	def person(name,sex,**kw):
    print(name,sex,kw)
    person('wang', 'M')  -> wang M {}。关键字参数也可以不传入。
	person('wang', 'M', age=33,city="nj")  -> wang M {'city': 'nj', 'age': 33}
	
	profile ={"age":33,"city":"nj"}
	person('wang', 'M', **profile)  -> wang M {'city': 'nj', 'age': 33}，当已经存在一个dict时，可以在该dict前面直接加**，使它变成关键字参数。
	注意：在person方法中获得传入的profile只是获得的一个dict的拷贝，对profile操作，不会影响方法外profile的值。
	限制关键字参数(命名关键字参数)。使用*占位符来分隔。
	def person_profile(name,sex,*,age=6,city):
    print(name,sex,age,city)
    person_profile('wang', 'M', city='nj')  -> wang M {'city': 'nj', 'age': 33}
	多了少了参数都不行，必须出现所有限定的关键词。否则报错。
	person_profile('wang', 'M', city='nj',address='jn')   ->TypeError: person_profile() got an unexpected keyword argument 'address'
	person_profile('wang', 'M')    ->TypeError: person_profile() missing 1 required keyword-only argument: 'city'
	■参数组合。在函数定义中可以使用必选参数，默认参数，可变参数，关键字参数，限制（命名）关键字参数。顺序也是如左述。
	注意，可变参数和命名关键字参数不可同时使用。WHY？？？？？？
	def para_mix(name,sex,city='nj',postcode=123,*args,**kw):
		print(name,sex,city,postcode,args,kw)
		
	arg = [1,2,3]
	para_mix('wang','M','nj',234,*arg)-> wang M nj 234 (1, 2, 3) {}
	注意：当对默认参数和可变参数同时使用时，如果传入了参数名，则会报错,WHY????
	para_mix('wang','M',postcode=234,*arg) ->TypeError: para_mix() got multiple values for argument 'postcode'
	
	所有的函数都可以通过传入List\tuple和dict，即以fun(*arg,**kw)的形式来调用,而无需其他参数。
	args=('wangqiang','M','other','234',2323)
	kws={"address":"jn"}
	para_mix(*args,**kw)->wangqiang M other 234 (2323,) {'address': 'jn'} 必须要先满足前面位置的参数，否则匹配会错位。
	
16.not isinstance(x, (int, float))
判断x，是否是int，float类型的。 (int, float)->是tuple类型。

17.抛出异常
使用raise关键字。 raise TypeError('bad operand type')

18.导入模块或者方法
使用from和import关键字。如from abstest import my_abs，导入abstest.py的my_abs方法。
import abstest，表示导入abstest模块的所有的方法。


19.切片(Slice)
L = ["micheal","kate","tom","lilei"]
L[0:3] ->['micheal', 'kate', 'tom']
L[:3]->['micheal', 'kate', 'tom'] 省略index 0 。
L[-1] -> lilei
L[-2:] ->['tom', 'lilei'] 获取倒数第2个到倒数第1个元素，可以省略-1
L[-2,-1] ->['tom', 'lilei']
L[::2] ->['micheal', 'tom']，每2个取一个。
L[:] -> ["micheal","kate","tom","lilei"]。获得所有元素
以上是使用list的例子。Tuple和String也是一样的。dict不可。


20.迭代
dic = {'a': 1, 'b': 2, 'c': 3}
for key in dic:
    print(key)  ->默认获得key
获得value    
for value in dic.values():
    print(value)
获得k,v
for k,v in dic.items():
    print(k,v)
list和tuple和String也一样，可以通过第一种方式迭代。
如何判断一个对象是否是可以迭代
from collections import Iterable
isinstance(x,Iteratable)

获取index和value，使用enumerate方法。；
for i, value in enumerate(['A', 'B', 'C']):
    print(i,value)




