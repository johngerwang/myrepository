Python reading notes

1.输入输出
  输入：input()方法
  输出:print()方法

2.if elif else
     需要缩进，一般一个TAB(4个空格)
     条件表达式结束时，需要以冒号:结束
    if age >= 18:
    	print('adult')
	else:
    	print('teenager')
     
3.数据类型(可以直接处理的)
  整数，浮点数，字符串。Python对整数/浮点数大小无限制，超过范围则用INF
  字符串需要用单引号''或者双引号""来标识，当字符串中有单引号时，用双引号括起来就可以了。而如果有双引号的话，必须转意，即\"
 r""/r''标识的字符串不转意。
 
 4.布尔运算符
 	not,or,and
 	
 5.空值
	None
	
6. 运算
//:地板除。即运算结果始终是整数。如10//3 = 3,而10//11=0
/:除法。计算结果是浮点数 9/3 =3.0
%:余数运算，结果是整数。10%3 = 1。 1%3 = 1

7.编码问题
ASCII，表示的范围0~255.如A是65，z是122.
GB2312.中文编码。Shift_JS：日文。Euc_kr：韩文。
Unicode：把所有的语言都统一到一套编码里面，这样就不会有乱码了。正常2个字节足够，比较生僻的字符4个字节。
如果要把ASCII编码英文字符转换成Unicode，则主要在前面加0即可。如A的unicode码是 00000000 0100 0001。ASCII是0100 0001.
UTF-8:把unicode编码转换成"可变长编码"的UTF-8。长度为1-6个字节。常用英文字母1个字节，汉字一般3个字节。生僻字4-6字节。
计算机内存中，统一使用Unicode编码，需要保存到应聘或者传输的时候，就转换成UTF-8。
如用记事本打开文件的时候，从文件中读取的UTF-8转换成unicode存储在内存中。保存的时候再转换成UTF-8。
网络传输时，服务器端从unicode转换成UTF-8通过网络传输到浏览器。<meta charset="UTF-8" />

ord()：将字符转换成对应的编码
char()：将编码转换成对应的字符

Python在内存中，对String是以Unicode编码的。如果要传输/保存到磁盘，就需要把String变成以字节为单位的bytes，使用encode方法。
从网络后者磁盘读取了字节流，那么读取到的数据就是bytes，要把bytes转变为String，则需要用decode()方法。
#encoding:utf-8.告诉Python编译器以utf-8读取源代码，否则可能有乱码。但是并不意味着.py文件就是以UTF-8编码的，得看编辑器的设置。
在用notepad++打开时，需要设置Encode in UTF-8 without BOM。
如果编辑器使用utf-8，且声明了#encoding:utf-8，则编辑器就不会显示乱码了。

8.格式化
%d:整数
%s:字符串
%f：浮点数
%x：十六进制
当有多个%？，需要有括号，否则省略也行。
注意，%变量 前不要有逗号，此处跟C语言不同
str = "wang"
print("hello %s" % str)
print("hello %s %s" % (str,str))
可以指定小数点后位数
print('%.2f' %3.1415)
->3.14
当需要在输出中保留%，如7%，则需要一个%来进行转意，即%%
print("%d%%" %7)
->7%

9. while & for
	while a>b:
		print("xxxx")
	
	for x in xs:
		print(x)
需要注意的是，都必须以冒号结尾

10.List
元素可变。查找和插入的时间随着元素的增加而增加；
定义方法，使用方括号，可包含各种类型的元素，如L = [1,2,3,4,'a',['c','d']]
增。L.append('e')，在末尾增加。L.insert(1,'f'),在位置1的地方插入f。如果使用insert方法插入的位置超过List长度，则在末尾插入。
删。L.pop(1)。将位置为1的元素删除，如果查询的元素超过List长度，则返回越界错误。IndexError: pop index out of range
查。L[1]，将位置1的元素返回。L[-1],将末尾的元素返回。如果查询的元素超过List长度，则返回越界错误。IndexError: pop index out of range
改。L(1,'aaa')，将位置1的元素改成aaa，L = ['aaa',2,3,4,'a',['c','d']]，如果修改的元素超过List长度，则返回越界错误。IndexError: pop index out of range
长度.L.len(),返回List的长度。


11.Tuple
元素不可变，所谓不可变的意思是，指向的元素不可变，但是如下定义指向的是list，而list是可变的，所以可变['e','f']可变成如['g','h']
定义方法。使用圆括号。可包含各种类型的元素。T = ('a','b','c',['e','f'])，
增。不可。
删。不可。
查。跟List一样。
长度。跟List一样。


12.range
返回指定范围的整数。如range(5)，返回0,1,2,3，4,5。


13.dict
字典。使用key-value对。key必须是不可变的，因为是根据key来算出hash，根据该hash得到value的存储位置，为了保证hash的正确性，所以只能使用不可变元素。
如果key使用了List，则无法加入dict。>>> key = [1, 2, 3] >>> d[key] = 'a list'   Traceback (most recent call last): 	TypeError: unhashable type: 'list'
查找和插入的速度极快，不会随着key的增加而增加，需要占用大量的内存，内存浪费多。
定义方法，使用大括号。并用冒号隔开key-value。如dic = {'a':123,'b':234}
增。不可。
删。dic.pop('a')。删除a(key)-123(value)。如果查询的元素不存在，则返回越界错误，KeyError。
查。dic['a'],如果查询的元素不存在，则返回越界错误，KeyError。这种情况下可以使用dic.get('aaa',-1)来查询，当'aaa'不存在时，默认返回-1。也可以用'aaa' in dic先判断，然后在查询。
长度。跟List一样。

14.set
集合。跟List的区别是set的元素不可重复。无序。只能存入不可变对象。
定义。s=set([1,2,3]),使用圆括号，必须使用list或者string作为输入,使用set关键字。如果有重复元素，那么重复的元素会被过滤掉。如s=set([1,1,2,2,3,3,3]),输出的只有1,2,3。
增。s.add(4)。将整数4添加到set中。如果有重复的元素被添加，则无视。
删。s.remove(2)。删除元素2。如果不存在，则KeyError: 4
查。???
交集。获取到2个set中重复的元素。使用&操作符号。s1 = set([1,2,3,4])  s2 = set([1,2,3])  s1&s2 ->1,2,3。也可使用方法：s1.intersection(s2)  
并集。合并2个set，将重复的元素剔除，获得2个set的所有的不同的元素。使用|操作符号。s1 = set([1,2,3,4])  s2 = set([1,2,3,5])  s1|s2 ->1,2,3,4,5。也可使用方法：s1.union(s2)  
差集。将2个set中的重复元素删除，获得前一个set剩余的元素。s1 = set([1,2,3,4])  s2 = set([1,2,3,5])  s1-s2 ->4。也可使用方法：s1.difference(s2) 
对称差集。获得2个set中各自不存在对方set中的元素。s1 = set([1,2,3,4])  s2 = set([1,2,3,5])    s1^s2 -> 4,5。也可使用方法：s1.symmetric_difference(s2)
长度。s.len()


14.数据类型转换函数
print(int("123"))
print(int(12.34))
print(float('12.34'))
print(str(123))
print(bool('')) ->空，当成False。
print(bool(1))->非空，当成True。

15.函数
定义方法。关键字def，函数名，参数，以冒号结尾，如。如def fun(a,b): 。遇到return，则返回。没有return，则默认返回None。
pass。使用pass作为占位符。当未确定方法的内容时，可以使用该占位符，否则方法运行时会出错。
return多个值。如myfun()方法有return x,y。调用返回多个值的方法时可以x,y = myfun()。其实返回多个值的时候实际上返回的是一个tuple，只是为了书写方便不会明确写成tuple的样子。
参数。可以定义默认参数，可变参数，关键字参数。
    ■默认参数。其中n=2，即为默认参数，当调用default_para_fun(5)，即不传入n的值的时候，使用默认参数的值。使用默认参数，可以降低调用难度。某种程度上相当于方法重载的概念。
		def default_para_fun(x,n=2):
			result = 1;
			while n>0:
				n = n-1
				result = result*n
			return result
	注意：1.默认参数放在参数列表的最后面。2.把变化大的参数放在前面，变小的参数放在后面作为默认参数。	
	3.当有多个默认参数的时候，调用方法时可以不按照出现的顺序，但是必须指定参数名（且必须和方法定义的参数名一致）
	def user_profile(name,sex,city='nj',age=6):
		print(name,sex,city,age)
    user_profile('wang', 'M', age=33)
	4.注意默认参数是否可变变量。如List这样的可变对象，则List的值会被保存下来。
	如下方法，当初次使用默认参数时，L的值是['end']，当再次调用的时候，就变成['end', 'end']，因为L变量已经在内存中保存下来了，再次修改时直接使用已经保存了(end)的L。
		def add_end(L=[]):
			L.append('end')
			return L   
	print(add_end([1,2,3])) ->[1, 2, 3, 'end']
	print(add_end([4,5,6])) ->[4, 5, 6, 'end']
	print(add_end())        ->['end']
	print(add_end())        ->['end', 'end']
	所以，尽量使用非可变对象。及时一定要用可变对象，那么最好像如下定义。
		def add_end1(L=None):
			if L is None:
				L = []
			L.append('end')
			return L
		print(add_end1())   ->['end']
		print(add_end1())   ->['end']
	■可变参数。可以传入0个至N个参数。使用可变参数，可以简化原来必须要用List或者Tuple的来调用的方法的定义。只要在参数前加上"*"符号。实际上就是传了一个Tuple。
	 def summ(*number):
		s = 0
		for n in number:
			s = n+s
		return s
	print(summ(1,2,3,3)) ->9

	ll = [1,2,3,4]
	print(summ(*ll)) ->10 当已经有一个现成的List或者Tuple时，可以在List或者Tuple前加"*"，传入具有可变参数的方法时，该传入参数就变成可变参数了。
	 
	■关键字(key-value)参数。可以传入若干含有参数名和参数值的pair，在该方法内部被转换成dict。
	定义形式**KW。需要2个星号"*"。
	def person(name,sex,**kw):
    print(name,sex,kw)
    person('wang', 'M')  -> wang M {}。关键字参数也可以不传入。
	person('wang', 'M', age=33,city="nj")  -> wang M {'city': 'nj', 'age': 33}
	
	profile ={"age":33,"city":"nj"}
	person('wang', 'M', **profile)  -> wang M {'city': 'nj', 'age': 33}，当已经存在一个dict时，可以在该dict前面直接加**，使它变成关键字参数。
	注意：在person方法中获得传入的profile只是获得的一个dict的拷贝，对profile操作，不会影响方法外profile的值。
	限制关键字参数(命名关键字参数)。使用*占位符来分隔。
	def person_profile(name,sex,*,age=6,city):
    print(name,sex,age,city)
    person_profile('wang', 'M', city='nj')  -> wang M {'city': 'nj', 'age': 33}
	多了少了参数都不行，必须出现所有限定的关键词。否则报错。
	person_profile('wang', 'M', city='nj',address='jn')   ->TypeError: person_profile() got an unexpected keyword argument 'address'
	person_profile('wang', 'M')    ->TypeError: person_profile() missing 1 required keyword-only argument: 'city'
	■参数组合。在函数定义中可以使用必选参数，默认参数，可变参数，关键字参数，限制（命名）关键字参数。顺序也是如左述。
	注意，可变参数和命名关键字参数不可同时使用。WHY？？？？？？
	def para_mix(name,sex,city='nj',postcode=123,*args,**kw):
		print(name,sex,city,postcode,args,kw)
		
	arg = [1,2,3]
	para_mix('wang','M','nj',234,*arg)-> wang M nj 234 (1, 2, 3) {}
	注意：当对默认参数和可变参数同时使用时，如果传入了参数名，则会报错,WHY????
	para_mix('wang','M',postcode=234,*arg) ->TypeError: para_mix() got multiple values for argument 'postcode'
	
	所有的函数都可以通过传入List\tuple和dict，即以fun(*arg,**kw)的形式来调用,而无需其他参数。
	args=('wangqiang','M','other','234',2323)
	kws={"address":"jn"}
	para_mix(*args,**kw)->wangqiang M other 234 (2323,) {'address': 'jn'} 必须要先满足前面位置的参数，否则匹配会错位。
	
16.not isinstance(x, (int, float))
判断x，是否是int，float类型的。 (int, float)->是tuple类型。

17.抛出异常
使用raise关键字。 raise TypeError('bad operand type')

18.导入模块或者方法
使用from和import关键字。如from abstest import my_abs，导入abstest.py的my_abs方法。
import abstest，表示导入abstest模块的所有的方法。


19.切片(Slice)
L = ["micheal","kate","tom","lilei"]
L[0:3] ->['micheal', 'kate', 'tom']
L[:3]->['micheal', 'kate', 'tom'] 省略index 0 。
L[-1] -> lilei
L[-2:] ->['tom', 'lilei'] 获取倒数第2个到倒数第1个元素，可以省略-1
L[-2,-1] ->['tom', 'lilei']
L[::2] ->['micheal', 'tom']，每2个取一个。
L[:] -> ["micheal","kate","tom","lilei"]。获得所有元素
以上是使用list的例子。Tuple和String也是一样的。dict不可。


20.迭代
dic = {'a': 1, 'b': 2, 'c': 3}
for key in dic:
    print(key)  ->默认获得key
获得value    
for value in dic.values():
    print(value)
获得k,v
for k,v in dic.items():
    print(k,v)
list和tuple和String也一样，可以通过第一种方式迭代。
如何判断一个对象是否是可以迭代
from collections import Iterable
isinstance(x,Iteratable)
isinstance("123", Iterable) 
isinstance([1,2,3], Iterable) true
isinstance(123, Iterable) false

获取index和value，使用enumerate方法。；
for i, value in enumerate(['A', 'B', 'C']):   或者for i, value in enumerate(('A', 'B', 'C')):
    print(i,value)

for x, y in [(1, 1), (2, 4), (3, 9)]:
    print(x,y)

21.列表生成式
简单的生成一个1~10的list。l = list(range(1, 11))  -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
稍微复杂，生成一个x*x的列表。[x*x for x in range(1,11)] ->[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
增加条件表达式。l = [x*x for x in range(1,11) if x%2==0] ->[4, 16, 36, 64, 100]
两层循环。l = [x*y for x in range(1,4) for y in range(2,5)] -> [2, 3, 4, 4, 6, 8, 6, 9, 12]
例子，获取当前路径下的所有目录 import os [dir for dir in os.listdir('.')] 
大写转小写。L = ['Hello', 'World', 'IBM', 'Apple']  l = [s.lower() for s in L] ->['hello', 'world', 'ibm', 'apple']
获得所有的字符串(过滤掉非字符串)L = ['Hello', 'World', 18, 'Apple', None]  l = [s.lower() for s in L if isinstance(s,str)]  ->['hello', 'world', 'apple']

22.生成器。generator
generator用于保存的是生成符合某一种算法，所以利用generator可以生成符合某种算法的数据。
generator与列表生成器的区别是，列表生成器使用的[]方括号，将方括号换成()圆括号即可。
gen = (x*x for x in range(1,11))  next(gen)3次后输出数据为1,4,9。注意在使用generator时是使用next方法返回数据的。当越界后，抛出StopIteration异常。
也可以通过  for x in gen 的方式来返回数据，这样方式就不会抛出StopIteration异常。
使用yield关键字生成generator。yield返回后，下一次调用next方法时，从yield返回处开始执行。如下方法返回斐波那契数列。
def fibo(max):
    a,b,count = 0,1,0;
    while count < max:
        yield(b)
        a,b = b,a+b  ->注意，此处当a=b，如等于1后，后面的a依然=0。跟a=b b=a+b语句不相等。
        count = count+1
    return 'done'  
	
	gen = fibo(9)
	while true:
		try:
			print(next(g)
		except StopIteration as si
			print(si.value)  ->当作为生成器使用时，如果要获得return的值，则必须通过StopIteration异常获取。
			break
对于函数改成的generator来说，遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，for/while循环随之结束。

22.迭代器(Iterable)
使用isinstance(x,Iterable)判断是否是可迭代的。可以直接作用于for的对象，都是可迭代的。
from collections import Iterable
print(isinstance([], Iterable)) ->True
print(isinstance({}, Iterable)) ->True
print(isinstance("str", Iterable)) ->True
print(isinstance((), Iterable)) ->True
print(isinstance((x for x in range(1,10)), Iterable)) ->True
使用isinstance(x,Iterator)判断是否是可迭代对象。能够使用next方法返回数据的对象都是Iterator对象。它们表示一个惰性计算的序列
list、dict、str等数据类型不是Iterator。
Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。
如果要讲list、dict、str,set等数据类型转换成Iterator，则需要使用iter方法，如iter([]),此时print(isinstance(iter([]), Iterator)) ->True
将Iterator对象转换成Iterable对象。如R是Iterator对象，转换成List的方法是list(R)

23.函数式编程
函数名其实就是一个指向函数实现的代码的一个指针。
def add(x,y,f):
    return f(x)+f(y)
result = add(-5,-6,abs) ->10

map函数。
将square函数作用于list的各元素上。
def square(x):
    return x*x
r = map(square,[1,2,3,4]) 
print(r)  -> <map object at 0x00624810> 此处r是一个Iterator对象。
print(list(r)) ->1,4,9,16，将Iterator对象转换成Iterable对象。
将list的元素变成字符。
l = list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))  ->str是数据类型

reduce函数。与map的返回不同，reduce返回一个值。
reduce把结果继续和序列的下一个元素做累积计算。必须接收两个参数。
格式：reduce(f, [x1, x2, x3, x4]) 相当于f(f(f(x1, x2), x3), x4)
将单个数字，转换成一个数据。
from _functools import reduce
def fun(x,y):
    return x*10+y
print(reduce(fun,[1,2,3])) ->123
讲字符串转变成数字
def char2num(s):
    return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
print(reduce(fun,map(char2num,"12345"))) ->12345
再简化
def strtoint(s):
    return reduce(lambda x, y: x * 10 + y, map(lambda z:{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[z], s))

使用lambda表达式简化fun方法
def strtoint(s):
    return reduce(lambda x, y: x * 10 + y, map(char2num, s))
	
也可以转换成一个方法来实现
def str2int(s):
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
    return reduce(fn, map(char2num, s))
	
将首字母变成大写，接下来的字母变成小写。
def lowerUpper(string):
    if len(string) >2:
        string = string.upper()
        firstChar = string[0]
        leftChar = string[1:].lower()
        return firstChar+leftChar
print(list(map(lowerUpper,['adam', 'LISA', 'barT'])))   -> ['Adam', 'Lisa', 'Bart']

def multipy(x,y):
    return x*y
print(reduce(multipy,[1,2,3,4,5])) ->120


用filter求素数

计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：

首先，列出从2开始的所有自然数，构造一个序列：
2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：
3, 5, 7, 9, 11,13, 15, 17,  19, ...
取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：
5, 7, 11,  13, 17,  19, ...
取新序的第一个数5，然后用5把序列的5的倍数筛掉：
7, 11,  13, 17,  19, ...
不断筛下去，就可以得到所有的素数。
用Python来实现这个算法，可以先构造一个从3开始的奇数序列：
def intgen(): #3开始的奇数序列
    start = 1
    while True:
        start = start+2
        yield start
        
def disable(n):
    return lambda x:x%n>0

def primes():
    yield 2
    it = intgen()
    while True:
        n = next(it)
        yield n
        it = filter(disable(n),it)

for n in primes():
    if n < 100:
        print(n)
    else:
        break

		
sorted函数
定义方法。sorted([x,x,x,x,x],key=fun,reverse=true|false)默认为false。


返回函数
def lazy_sum(*args):->使用了可变长参数。
    def sum():
        result = 0
        for i in args:
            result = result+i
            return result
    return sum
将函数赋值给f。f=lazy_sum((1,2,3))或者 f=lazy_sum(*[1,2,3])-><function lazy_sum.<locals>.sum at 0x001BA150>
调用该函数输出f()  ->6
可知，内部的sum函数可以引用外部lazy_sum的参数args
当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。
需要注意：下面这个函数的返回中，包含了循环变量i，最终执行f1(),f2(),f3()的时候返回的值是一样的，都是9。
原因是，变量i被函数f1(),f2(),f3()引用了，而当f1(),f2(),f3()执行的时候，i的值已经变成了3。
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f)
    return fs

f1, f2, f3 = count() ->注意此种赋值方式，list可以这样赋值的。。

解决办法。新定义一个方法f，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变。
def count(*args)
	def f(i)
		def g()
			return i*i
		return g 
	fs = []
	for i in args
		fs.append(f(i))
	return fs
f1, f2, f3 = count()


lambda表达式（也可以称作匿名函数）
定义形式：lambda 参数：表达式。只能有一个表达式，不用写return，返回值就是该表达式的结果。
f = lambda x : x*x
print(f) -><function <lambda> at 0x02185150>
print(f(2)) ->4

AOP/装饰器：在方法被执行前调用。
import functools  
def log(fun):
    @functools.wraps(fun)
    def wrapper(*arg,**kw):
        print(fun.__name__ + "  is called")
        return fun(*arg,**kw)  ->如果只被now用，那么形参不需要这样，直接一个参数就行。此处是通用的写法，即该log可以被任何的函数使用。
    return wrapper
@log
def now(txt):
    print(txt)
now("hello")
#相当于
now = log(now("hello"))

当需要装饰器有参数传入的情况下，需要再包装一层函数
def log_para(text):
    def decorator(fun):
        def wrapper(*arg,**kw):
            print(fun.__name__ + "  is called and will be " +text)
            return fun(*arg,**kw)
        return wrapper
    return decorator

@log_para("execute")
def now1(txt):
    print(txt)
now1("aab")
now = log_para("execute")(now1("hello"))

偏函数
使用functools.partial把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数。
int2= functools.partial(int,base=2)
#2进制转换成10进制
print(int2("10010"))  ->18
相当于
kw = { 'base': 2 }
int('10010', **kw)

模块
python的模块名：包名+模块名。各模块下一定需要有一个__init__.py文件,否则python不认为这个目录是一个包。

使用模块
使用import导入该模块即可。
import sys
__author__ ="wang"
def test():
    args = sys.argv
    if len(args)==1:   ->注意，参数的编号是以python命令开始的，即python文件是args[0]，以此类推。
        print("hello")
    elif len(args)==2:
        print("hello " + args[1])
    else:
        print("too many args")

if __name__ == '__main__':
    test()

作用域
Python中没有办法可以限制访问模块的函数或者变量，注意是函数，并不是类中的方法和成员变量。
但是一般来说约定如下
"_","__"1个或者2个下划线开头的变量或者函数，”不应该“直接去访问
__XXX__是特殊变量。如__author__，__name__,__doc__等


第三方库
pypi.python.org，可以从该网站查询，一般都会在该网站上注册
第三方库还有MySQL的驱动：mysql-connector-python，用于科学计算的NumPy库：numpy，用于生成文本的模板工具Jinja2，图片处理：Pillow和PIL（Python Imaging Library0等等